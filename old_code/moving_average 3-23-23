# columns_names = []

    # prices = []

    # comparison_point = 0

    # # create list of column names
    # for n in range(eval_len):
    #     columns_names.append('Price ' + str(n))

    # # define column names from columns     
    # data = pd.DataFrame(columns=columns_names)

    # gain_table = pd.DataFrame()

    # # create prices list and then add each array of prices to the column
    # for n in range(eval_len):
    #     # get prices for each window each column is all the data for the nth value of the eval_len
    #     prices.append([window['Price'].iloc[n] for window in df2.rolling(window=eval_len)
    #        if len(window) == eval_len and window['Action'].iloc[0] == desired_action])
        
    #     # set each column equal to the nth price list
    #     data[data.columns[n]] = prices[n]
        
    #     if n != 0:
    #          # find the names of the price columns that we are looking for
    #         nth_column_name = data.columns[n]
            
    #         comparision_column_name = data.columns[comparison_point]
        
    #         # create the name of the column for the specific piece of data
    #         key_name = 'P ' + str(n) + ' - P ' + str(comparison_point)
    #         data[key_name] = data[nth_column_name] - data[comparision_column_name]
            
    #         # create a table with the gains from all of the stocks
    #         gain_table[key_name] = 100 * (data[nth_column_name] - data[comparision_column_name]) / data[comparision_column_name]

    #     print(data)

    
    # gain_table.to_csv('temp.csv')

    # # find maximum of each row  
    # data['Greatest Gain %'] = gain_table.max(axis=1)

    # # find the column it occurred in
    # data['Time of Success'] = gain_table.idxmax(axis=1)
        
    # most_successful_time = data.mode()['Time of Success'][0]

    # ### if we always made the right choice:
    # perfect_ttl = str(round(data['Greatest Gain %'].sum(), prec_lvl)) + '%'

    # ### total assuming you use the same method every time
    # actual_ttl = str(round(gain_table[key_name].sum(), prec_lvl)) + '%'

    # # find the performance figures and make them into a table
    # values = [[most_successful_time, actual_ttl, perfect_ttl]]
    # performance = pd.DataFrame(values, columns=['Most Frequent Row:', 'TTL Based on this Row:', 'Perfect Total:'])

    # # create file name for performance
    # performance_file_name = 'performance_with_for_' + ticker + '_with_eval_len_' + str(eval_len) + '_k_of_' + str(k) + '_on_' + str(today) + '.csv'

    # # save to csv
    # performance.to_csv(os.path.join(performance_folder, performance_file_name))